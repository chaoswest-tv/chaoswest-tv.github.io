{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"meta/publishing/","text":"Publishing \u00b6 Publishing a new version of the documentation to GitHub pages: $ cd chaoswest-tv.github.io $ mkdocs gh-deploy --config-file ../public-docs/mkdocs.yml --remote-branch master Or use the comfortable way: $ ./tools/publish.sh","title":"Publishing"},{"location":"meta/publishing/#publishing","text":"Publishing a new version of the documentation to GitHub pages: $ cd chaoswest-tv.github.io $ mkdocs gh-deploy --config-file ../public-docs/mkdocs.yml --remote-branch master Or use the comfortable way: $ ./tools/publish.sh","title":"Publishing"},{"location":"streaming/","text":"Streaming Overview \u00b6 CWTV loves streaming. In fact, we love it so much that we have built a bunch of great tools around streaming, and have amassed a lot of knowledge around the topic, that we are very happy to share!","title":"Overview"},{"location":"streaming/#streaming-overview","text":"CWTV loves streaming. In fact, we love it so much that we have built a bunch of great tools around streaming, and have amassed a lot of knowledge around the topic, that we are very happy to share!","title":"Streaming Overview"},{"location":"streaming/cluster/","text":"Streaming Cluster Overview \u00b6 We develop and operate a (for lack of a better title) \"Streaming Cluster\". The aim for this cluster to provide tools that help with many tasks for streaming. The idea is to have a bunch of little, composable utilities. 1 Our vision: Redundant RTMP ingest RTMP relaying/restreaming RTMP transcoding RTMP videomixing with live manipulation HLS publishing with multi-variant transcoding Autoscaling HLS CDN Redundant SRT ingest Low-Latency viewer participation All components for this cluster are opensource and available for anyone - to use, learn from, and contribute! Think unix philosophy. \u21a9","title":"Overview"},{"location":"streaming/cluster/#streaming-cluster-overview","text":"We develop and operate a (for lack of a better title) \"Streaming Cluster\". The aim for this cluster to provide tools that help with many tasks for streaming. The idea is to have a bunch of little, composable utilities. 1 Our vision: Redundant RTMP ingest RTMP relaying/restreaming RTMP transcoding RTMP videomixing with live manipulation HLS publishing with multi-variant transcoding Autoscaling HLS CDN Redundant SRT ingest Low-Latency viewer participation All components for this cluster are opensource and available for anyone - to use, learn from, and contribute! Think unix philosophy. \u21a9","title":"Streaming Cluster Overview"},{"location":"streaming/cluster/architecture/","text":"Cluster Architecture \u00b6 Architecture Graph \u00b6 Look at my graph, my graph is amazing... The Present \u00b6 Portier \u00b6 chaoswest-tv/portier Portier is a Django application that holds all configurations for streams and tasks. It provides users with either a Webinterface or an API to configure streams and tasks that process streams. When Portier is being notified by SRS about a stream, it will construct task descriptions out of the configurations that are processing this stream. Concierge \u00b6 chaoswest-tv/concierge Concierge is a tiny Python daemon, that negotiates with Portier about executing a task. It will then control a local supervisord daemon, which controls the actual process for this task. Task executions are mostly ffmpeg process calls, that will pull RTMP streams from the SRS edges, process them, and then either push them back to the SRS origin or any other RTMP receiver. If we want to add new task functionality to the cluster, we need to build a Django model describing all relevant aspects for the task type teach Portier how to compile the new task description build a Portier API & WebUI for easy configuration of the task type teach Concierge how to execute ths new task type SRS \u00b6 The SRS cluster is the central component that receives RTMP streams and plays out RTMP streams to clients. This is a redundant cluster, where senders can send the same stream to multiple origin nodes. When a client requests a stream from the edge nodes, they will search for the stream on the origin nodes. If a RTMP connection to one off the origin nodes fails, all edge nodes that were using that origin will try to failover to another origin node receiving the stream. This happens within a few seconds, while keeping the client RTMP session alive. When a sender tries to publish a RTMP stream to the cluster, the cluster will first ask Portier if this stream is authorized before accepting the stream. The future \u00b6 We have an immediate need for playing out streams directly to users, instead of just \"transporting\" the stream to another more popular streaming platform. For this, work on a custom HLS CDN has started. What's needed: A task type that transcodes to a multi-variant HLS stream. Find a suitable storage system that is robust enough to act as the origin serving the HLS .ts chunks & playlists to the CDN edges Build a intermediary that can on-the-fly rewrite HLS playlists to redirect users to different CDN edges for load-balancing of .ts chunk delivery. Write code & configuration that autoscales a farm of nginx caching proxies, acting as the CDN edges Write code that keeps track of CDN edges, their liveness and their load.","title":"Architecture"},{"location":"streaming/cluster/architecture/#cluster-architecture","text":"","title":"Cluster Architecture"},{"location":"streaming/cluster/architecture/#architecture-graph","text":"Look at my graph, my graph is amazing...","title":"Architecture Graph"},{"location":"streaming/cluster/architecture/#the-present","text":"","title":"The Present"},{"location":"streaming/cluster/architecture/#portier","text":"chaoswest-tv/portier Portier is a Django application that holds all configurations for streams and tasks. It provides users with either a Webinterface or an API to configure streams and tasks that process streams. When Portier is being notified by SRS about a stream, it will construct task descriptions out of the configurations that are processing this stream.","title":"Portier"},{"location":"streaming/cluster/architecture/#concierge","text":"chaoswest-tv/concierge Concierge is a tiny Python daemon, that negotiates with Portier about executing a task. It will then control a local supervisord daemon, which controls the actual process for this task. Task executions are mostly ffmpeg process calls, that will pull RTMP streams from the SRS edges, process them, and then either push them back to the SRS origin or any other RTMP receiver. If we want to add new task functionality to the cluster, we need to build a Django model describing all relevant aspects for the task type teach Portier how to compile the new task description build a Portier API & WebUI for easy configuration of the task type teach Concierge how to execute ths new task type","title":"Concierge"},{"location":"streaming/cluster/architecture/#srs","text":"The SRS cluster is the central component that receives RTMP streams and plays out RTMP streams to clients. This is a redundant cluster, where senders can send the same stream to multiple origin nodes. When a client requests a stream from the edge nodes, they will search for the stream on the origin nodes. If a RTMP connection to one off the origin nodes fails, all edge nodes that were using that origin will try to failover to another origin node receiving the stream. This happens within a few seconds, while keeping the client RTMP session alive. When a sender tries to publish a RTMP stream to the cluster, the cluster will first ask Portier if this stream is authorized before accepting the stream.","title":"SRS"},{"location":"streaming/cluster/architecture/#the-future","text":"We have an immediate need for playing out streams directly to users, instead of just \"transporting\" the stream to another more popular streaming platform. For this, work on a custom HLS CDN has started. What's needed: A task type that transcodes to a multi-variant HLS stream. Find a suitable storage system that is robust enough to act as the origin serving the HLS .ts chunks & playlists to the CDN edges Build a intermediary that can on-the-fly rewrite HLS playlists to redirect users to different CDN edges for load-balancing of .ts chunk delivery. Write code & configuration that autoscales a farm of nginx caching proxies, acting as the CDN edges Write code that keeps track of CDN edges, their liveness and their load.","title":"The future"},{"location":"streaming/cluster/attributions/","text":"Attributions \u00b6 We are standing on the shoulders of giants. The following third-party, opensource software are core components of the cluster. Without these great projects this would not have been possible. ffmpeg \u2014 ffmpeg.org srs \u2014 ossrs/srs django \u2014 djangoproject.com supervisor \u2014 supervisord.org All of these projects are opensource, so we hold ourselves to the standard of contributing everything we can back to the world, as free opensource.","title":"Attributions"},{"location":"streaming/cluster/attributions/#attributions","text":"We are standing on the shoulders of giants. The following third-party, opensource software are core components of the cluster. Without these great projects this would not have been possible. ffmpeg \u2014 ffmpeg.org srs \u2014 ossrs/srs django \u2014 djangoproject.com supervisor \u2014 supervisord.org All of these projects are opensource, so we hold ourselves to the standard of contributing everything we can back to the world, as free opensource.","title":"Attributions"},{"location":"streaming/cluster/hlscdn/architecture/","text":"","title":"Architecture"}]}